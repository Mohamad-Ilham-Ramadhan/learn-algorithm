"""
	(1D Dynamic Programming) 416. Partition Equal Subset Sum (medium)

	Link: https://leetcode.com/problems/partition-equal-subset-sum
    
	Tags:  Array, Dynamic Programming

	Constraints:
		- 1 <= nums.length <= 200
		- 1 <= nums[i] <= 100
	======================================================================

	Submissions: 
		runtime: 272 ms, beats 95.85%
		memory: 16.64 MB, beats 81.19%
"""
'''
n1 = [1,5,11,5] # True
	11 5 5 1
1	11
0
n3 = [2,14,10,15,6,5] # True total = 52 [15, 6, 5] or [14,10,2]
	15 14 10 6 5 2
1  15    25
0  0  14 24     2

n4 = [4,10,7,9,7,1,11,9,13,15] # True half 43
	15 13 11 10 9  9  7  7  4 1
15 15 28 39 39 39 39 39 39 43

n5 = [1,2,4,6,8,9,10,10,12,14,15,15,16,17,19] # True half=79
	19 17 16 15 15 14 12 10 10 9  8  6  4  2  1
	19 36 52 68 68 68 68 78 78 78 78 78 78 78 1

	8 8  7  7  5  5
	8 16 16 16 16 16 false
	0 8  15 15 20 		True

# DP with set (THE ANSWER)
n9 = [23,13,11,7,6,5,5] # True half=35 [23 + 7 + 5]
 23 13 11 7  6 5 5
23 = 23 0
13 = 36 13 | 23 0
11 = 47 24 34 24 | 36 13 23 13
7 =  54 31 41 31 43 20 30 20 | 47 24 34 24 36 13 23 13
6 =  60 37 47 37 49 26 36 26 53 30 40 30 42 19 29 19 | 54 31 41 31 43 20 30 20 47 24 34 24 36 13 23 13
5 = 
'''
def canPartition(nums):
	total = sum(nums)
	if total % 2: return False
	nums.sort()
	half = total / 2
	dp = set([0])
	for i in range(len(nums)-1, -1, -1):
		if nums[i] > half: 
			continue 
		if nums[i] == half: 
			return True 
		newDpEls = []
		for t in dp: 
			if t + nums[i] == half:
				return True
			if t + nums[i] > half: continue
			if t + nums[i] not in dp: 
				newDpEls.append(t + nums[i])
		for el in newDpEls:
			dp.add(el)

	return False
n1 = [1,5,11,5] # True
n2 = [1,2,3,5] # False
n3 = [2,14,10,15,6,5] # True half = 26
n4 = [4,10,7,9,7,1,11,9,13,15] # True half 43
n5 = [1, 2, 4, 6, 8, 9, 10, 10, 12, 14, 15, 15, 16, 17, 19] # True half=79
n6 = [8,8,7,7,5,5] # True half=20
nalse half=9998
n8 = [1,1]
n9 = [23,13,11,7,6,5,5] # True half=35
print('RESULT: ', canPartition(n9))
# print(sum(n9))