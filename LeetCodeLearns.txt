Lesson learned in solving LeetCode problems:
   - We can use Floyd's hare and tortoise algorithm to detect a cycle in linked list. So we can make time complexity to O(1) instead use a hashmap will be O(n) 
   
   - Use tree and backtracking to find combinations of something like pair of parentheses.
   
   - We can use slow and fast pointers to determine the mid point of a linked list:
      # initial position
      1->2->3->4->5
      s  f
      # 2
      1->2->3->4->5
         s     f
      # 3
      1->2->3->4->5
            s        f
      # 4 both lists are:
      1->2->3  and  4->5
   
   - && operator in if statement is evaluated from left to right. If the left is false then the right will not evaluated.
      var n = null;
      if (n && n.next) <-- false 

      n.next <-- will not be evaluated, even if this is a runtime error.

      so the error will not occur.
   
   - Merge sort: if we have already sorted arrays [[sorted], [sorted], [sorted]], we can just merge them.

   - Conditional matters:
      - in inverting binary tree (recursion):
         - if (root === null || (root.left === null && root.right === null)) return root;
            Runtime: 68 ms, beats 12.5%
         - if (root === null) return root;
            Runtime: 53 ms, beats 85.15%

   - Math.max() vs ternary operator:
      - num1 >= num2 ? num1 : num2; (faster)
      - Math.max(num1, num2); (slower)

- Stuck problems:
   - Subtree of another tree (easy): https://leetcode.com/problems/subtree-of-another-tree 

- Indexing in the queue object so it behaves like an array:
   class Queue {
      constructor() {
         this.queue = {};
         this.head = 0; <----------- INDEX
         this.tail = 0; <----------- INDEX
      }
      enqueue(val) {
         this.queue[this.tail++] = val; <----------- INDEX
      }
      dequeue() {
         const val = this.queue[this.head]; 
         delete this.queue[this.head++]; <----------- INDEX
         return val;
      }
      peak() {
         return this.queue[this.head];
      }
      clear() {
         this.head = 0;
         this.tail = 0;
         this.queue = {};
      }
      size() {
         return this.tail - this.head;
      }
   }

- Swapping two elements in an array:
   - const arr = [1,2,3,4];
   - [ arr[0], arr[3] ] = [ arr[3], arr[0] ];
   - arr -> [4, 2, 3, 1]

- Use negative numbers to mimic max heap if we only have min heap like in the Python language.
   - max heap    min heap           negative min heap
        8         4     --------->     -8
      4   6     8   6                -4  -6
      
      - so we only need to use Math.absolute() to get the max number.

- When store 2D coordinate (x,y) in Set, use `${x},${y}` instead `${x}${y}` because if x = 1 and y = 11 -> '111' it's equal with x = 11 and y = 1 -> '111'

- Use number instead of string when comparing or matching something because it's faster, for Example:
   - when I use `${x},${y}` to store 2D visited coordinate which latter checked: if (visited.has(`${x},${y}`)), the runtime is:
      #1
      Runtime: 141 ms, beats 15.71%
      #2
      Runtime: 151 ms, beats 12.80%
   - But when I use number instead of string: visited.has((y * colsLength) + x), the runtime is:
      #1
      Runtime: 93 ms, beats 41.46%
      #2
      Runtime: 81 ms, beats 66.89%

   - Numbers almost two times faster.

- The best way to store visited coordinate is using object. Using numbers can cause conflict for example:
   - (number conflicts):
         [1,2]
      [x][3,4] <--- x is before number 3

      coordinate for number 2 is [0,1], the number is (0 * 2) + 1 = 1
      coordinate for before number 3 is [1, -1], the number is (1 * 2) + -1 = 1

   - (using object)
      - store: 
         if (visited[r] === undefined) visited[r] = {};
         visited[r][c] = true;
      
      - checking/matching/has 
         if (visited[r] && visited[r][c]) // match/has 
      
      - delete: 
         delete visited[r][c];

- Map is 20% faster than Object:
   - using object for cache in dynamic programming
      var climbStairs = function(n) {
         let cache = {1: 1, 0: 1, '-1': 0};
         function dp(n) {
            if (cache[n] !== undefined) return cache[n];
            cache[n] = dp(n-2) + dp(n-1);
            return cache[n];
         }
         return dp(n);
      };
      - Runtime: 63 ms, beats 24.57%
      - Memory: 41.7 MB, beats 70.8%
   
   - using Map for cache in dynamic programming
      var climbStairs = function(n) {
         const cache = (new Map()).set(1,1).set(0,1).set(-1,0);
         function dp(n) {
            if (cache.has(n)) return cache.get(n)
            cache.set(n, dp(n-2) + dp(n-1) );
            return cache.get(n);
         }
         return dp(n);
      };
      - Runtime: 50 ms, beats 89.32%
      - Memory: 42.1 MB, beats 29.25%

- Dynamic programming can makes O(2||3||4...^n) to O(n)

- (Python3): Don't use this: var = [[0] * t2l] * t1l. To build base 2D matrix because all rows share same reference

- (Python3): int() function always truncates number toward zero.

- (Python3): collections.Counter class for counting item in the list: 
   - instead doing this: 
      tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"]
      hm = {} 
      for c in tasks: 
         if c in hm: hm[c] += 1
         else: hm[c] = 1 
      
      hm => {'A': 6, 'B': 1, 'C': 1, 'D': 1, 'E': 1, 'F': 1, 'G': 1}
   
   - Using Counter class: 
      from collections import Counter 
      
      hm = Counter(tasks)
      hm => {'A': 6, 'B': 1, 'C': 1, 'D': 1, 'E': 1, 'F': 1, 'G': 1}