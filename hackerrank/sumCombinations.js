function solve(n) {

   // base case
   if (n < 0)
     return 0;
   if (n == 0)
     return 1;
   
   const result = solve(n - 1) + solve(n - 3) + solve(n - 5);
   // console.log('RECURSE', 'N', n, 'n - 1 ', n - 1, 'n - 3', n - 3, 'n - 5', n - 5, 'result', result);
   return result;
 }
 
 /*
   === INITIAL =============================================================
 solve(6 - 1) + solve(6 - 3) + solve(6 - 5)
 (n5 + n2 + 1) + (n2 + 1 + 0) + (n1)
 ( ((n4 + n2 + 0) + (n1 + 0 + 0) + 1) ) + ( (n1 + 0 + 0) + 1 + 0 ) + 1 
 ( (n3 + n1 + 0) + (1) +  1 + 1 ) +  ( 1 + 1 ) + 1
 ( ( (n2 + 1 + 0) + 1 + 0 ) + 1 + 1 ) + ( 1 + 1 ) + 1
 ( ( (n1 + 0 + 0) + 1 + 0 ) + 1 + 1 ) + ( 1 + 1 ) + 1
 ( ( 1 + 1 + 0 ) + 1 + 1 ) + ( 1 + 1 ) + 1
 
 (1)5 | (3)3 | (5)1
 (11)4 (13)2 (15)0++ | (31)2 (33)0++ (35)-2 | (51)0++ (53)-2 (55)-4
 (111)3 (113)1 (115)-1 (131)1 (133)-1 (135)-3 (15)0++ | (311)1 (33)0++ | (35)-2
 (1111)2 (1113)0++ (1115)-2 (1131)0++ (1133)-2 (1135)-4 (115)-1 (1311)0++ (1313)-2 (1315)-4 (133)-1 (135)-3 (15)0++ | (3111)0++ (3113)-2 (3115)-4 (33)0++ (35)-2 | (51)0++ (53)-2 (55)-4
 (11111)1 (11113)-1 (11115)-3 (1113)0++ (1115)-2 (1131)0++ (1133)-2 (1135)-4 (115)-1 (1311)0++ (1313)-2 (1315)-4 (133)-1 (135)-3 (15)0++ | (3111)0++ (3113)-2 (3115)-4 (33)0++ (35)-2 | (51)0++ (53)-2 (55)-4
 (111111)0++ (111113)-2 (111115)-4 (11113)-1 (11115)-3 (1113)0++ (1115)-2 (1131)0++ (1133)-2 (1135)-4 (115)-1 (1311)0++ (1313)-2 (1315)-4 (133)-1 (135)-3 (15)0++ | (3111)0++ (3113)-2 (3115)-4 (33)0++ (35)-2 | (51)0++ (53)-2 (55)-4
 
 (111111)0++
 (1113)0++
 (1131)0++
 (1311)0++
 (15)0++
 (3111)0++
 (33)0++
 (51)0++
 
 */
 
 
 
 
 
 const numbers = [1, 3, 5];
 const number = 6;
 
 // console.log('RESULT:', solve(6));